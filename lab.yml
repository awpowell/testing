---
# Variables
AWSTemplateFormatVersion: 2010-09-09
Description: 
  Testing for Alvin

Parameters:

  pVpc:
    Type: String
    Description: Name of the VPC to create
    MinLength: 1
    MaxLength: 30
    Default: ALVTEST

  pS3Bucket:
    Type: String
    Description: Name of the S3 Bucket to create
    MinLength: 1
    MaxLength: 30
    Default: ELBLogs

  pSubnet1:
    Type: String
    Description: Name of the first private subnet to create
    MinLength: 1
    MaxLength: 30
    Default: Private1

  pSubnet2:
    Type: String
    Description: Name of the second private subnet to create
    MinLength: 1
    MaxLength: 30
    Default: Private2

  pSubnet3:
    Type: String
    Description: Name of the first public subnet to create
    MinLength: 1
    MaxLength: 30
    Default: Public3

  pSubnet4:
    Type: String
    Description: Name of the second public subnet to create
    MinLength: 1
    MaxLength: 30
    Default: Public4

  pAvailabilityZoneA:
    Type: String
    Description: Please enter the Availability Zone A
    Default: eu-west-1a

  pAvailabilityZoneB:
    Type: String
    Description: Please enter the Availability Zone B
    Default: eu-west-1b

  pVpcCidr:
    Type: String
    Description: CIDR for VPC
    Default: 10.200.0.0/16

  pPrivateSubnet1Cidr:
    Type: String
    Description: Subnet for private Subnet 1
    Default: 10.200.100.0/24

  pPrivateSubnet2Cidr:
    Type: String
    Description: Subnet for private Subnet 2
    Default: 10.200.101.0/24

  pPublicSubnet3Cidr:
    Type: String
    Description: Subnet for private Subnet 2
    Default: 10.200.102.0/24

  pPublicSubnet4Cidr:
    Type: String
    Description: Subnet for private Subnet 2
    Default: 10.200.103.0/24
  
  pIGW:
    Type: String
    Description: Name of the Internet Gateway
    MinLength: 1
    MaxLength: 30
    Default: TEST-IGW

  pPublicRouteTable:
    Type: String
    Description: Name of the public route table
    MinLength: 1
    MaxLength: 30
    Default: PublicRouteTable

  pPrivateRouteTable1:
    Type: String
    Description: Name of the private route table
    MinLength: 1
    MaxLength: 30
    Default: PrivateRouteTable1

  pPrivateRouteTable2:
    Type: String
    Description: Name of the private route table
    MinLength: 1
    MaxLength: 30
    Default: PrivateRouteTable2

  pNatGatewayName1:
    Type: String
    Description: Name of the first NAT Gateway
    MinLength: 1
    MaxLength: 30
    Default: TestNAT1

  pNatGatewayName2:
    Type: String
    Description: Name of the second NAT Gateway
    MinLength: 1
    MaxLength: 30
    Default: TestNAT2

  pAmi:
    Type: String
    Description: EC2 AMI ID (Linux, HVM).
    Default: ami-3bfab942
    MinLength: 12
    MaxLength: 12
    AllowedPattern: "^ami-[0-9a-fA-F]{8}"
    ConstraintDescription: Must be a valid AMI ID ami-xxxxxxxx
    
  pInstanceType:
    Type: String
    Description: Type of instance
    Default: t2.micro

  pKeyPairName:
    Type: String
    Description: Name of key pair to use for EC2 instances
    MinLength: 1
    MaxLength: 30
    Default: ALVINTestKeyPair

Resources:

############################################################### VPC ###############################################################
# Create VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref pVpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref pVpc

########################################################### Networking ###########################################################
# Create Private Subnet1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
        Ref: VPC
      CidrBlock: !Ref pPrivateSubnet1Cidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Ref pAvailabilityZoneA
      Tags:
        - Key: Name
          Value: !Ref pSubnet1

# Create Private Subnet2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
        Ref: VPC
      CidrBlock: !Ref pPrivateSubnet2Cidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Ref pAvailabilityZoneB
      Tags:
        - Key: Name
          Value: !Ref pSubnet2

# Create Public Subnet3
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
        Ref: VPC
      CidrBlock: !Ref pPublicSubnet3Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Ref pAvailabilityZoneA
      Tags:
        - Key: Name
          Value: !Ref pSubnet3

# Create Public Subnet4
  PublicSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
        Ref: VPC
      CidrBlock: !Ref pPublicSubnet4Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Ref pAvailabilityZoneB
      Tags:
        - Key: Name
          Value: !Ref pSubnet4

# Create Internet Gateway
  IGW:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
      - Key: Name
        Value: !Ref pIGW

# Attach Internet Gateway to VPC
  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: IGW

# Create Public subnet route table
  PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: VPC
        Tags:
        - Key: Name
          Value: !Ref pPublicRouteTable

# Create Private subnet route table
  PrivateRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: VPC
        Tags:
        - Key: Name
          Value: !Ref pPrivateRouteTable1

  PrivateRouteTable2:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId:
          Ref: VPC
        Tags:
        - Key: Name
          Value: !Ref pPrivateRouteTable2

# Associate private subnets to private route table
  AssociateRouteTableToPrivateSubnet1:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: PrivateSubnet1
        RouteTableId:
          Ref: PrivateRouteTable1

# Associate private subnets to private route table
  AssociateRouteTableToPrivateSubnet2:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: PrivateSubnet2
        RouteTableId:
          Ref: PrivateRouteTable2

  AssociateRouteTableToPublicSubnet3:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: PublicSubnet3
        RouteTableId:
          Ref: PublicRouteTable

  AssociateRouteTableToPublicSubnet4:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId:
          Ref: PublicSubnet4
        RouteTableId:
          Ref: PublicRouteTable

# Create default route to public route table
  DefaultRoutePublicSubnet:
      Type: AWS::EC2::Route
      DependsOn: IGW
      Properties:
        RouteTableId:
          Ref: PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: IGW

# Create NAT instances for private subnets
  NAT1:
    DependsOn: IGW
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EIP1
          - AllocationId
      SubnetId:
        Ref: PublicSubnet3
      Tags:
        - Key: Name
          Value: !Ref pNatGatewayName1

  NAT2:
    DependsOn: IGW
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EIP2
          - AllocationId
      SubnetId:
        Ref: PublicSubnet4
      Tags:
        - Key: Name
          Value: !Ref pNatGatewayName2

  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  EIPRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT1

  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  EIPRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NAT2

########################################################### Security Groups ###########################################################
# Create a Security Group for SSH
  SGGroupSshIn:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "SSH all"
      GroupDescription: "Open SSH trafic"
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SecurityGroupSshIn

# Create a Security Group for Web servers
  SecurityGroupWebServers:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "HTTP all Internal"
      GroupDescription: "Open HTTP traffic"
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 10.200.0.0/16
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 10.200.0.0/16
        - IpProtocol: icmp
          FromPort: '8'
          ToPort: "-1"
          CidrIp: 10.200.0.0/16
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SecurityGroupWebServers

# Create a Security Group for the ELB to allow http in
  SecurityGroupHTTPELB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "HTTP all public"
      GroupDescription: "Open HTTP traffic"
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SecurityGroupHTTPELB

########################################################### Instances ###########################################################
# Create EC2 Bastion Host in Public subnet
  awsbastionhost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref pAmi
      KeyName: !Ref pKeyPairName
      InstanceType: !Ref pInstanceType
      SecurityGroupIds:
        - !Ref SGGroupSshIn
      SubnetId: !Ref PublicSubnet3
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -ex
          sudo hostname aws-bastion-01;
          echo aws-bastion-01 > /etc/hostname;
      Tags:
        - Key: Name
          Value: aws-bastion-01
        - Key: Role
          Value: Bastion Host

# Create test web servers
  webserver1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref pAmi
      KeyName: !Ref pKeyPairName
      InstanceType: !Ref pInstanceType
      SecurityGroupIds:
        - !Ref SecurityGroupWebServers
      SubnetId: !Ref PrivateSubnet1
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -ex
          hostname webserver1
          echo webserver1 > /etc/hostname
          while ! yum install -y httpd; do sleep 5; done;
          service httpd start
          chkconfig httpd on
      Tags:
        - Key: Name
          Value: webserver1
        - Key: Role
          Value: webserver1

  webserver2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref pAmi
      KeyName: !Ref pKeyPairName
      InstanceType: !Ref pInstanceType
      SecurityGroupIds:
        - !Ref SecurityGroupWebServers
      SubnetId: !Ref PrivateSubnet2
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash -ex
          while ! yum install -y httpd; do sleep 5; done;
          service httpd start
          chkconfig httpd on
          hostname webserver2
          echo webserver2 > /etc/hostname
      Tags:
        - Key: Name
          Value: webserver2
        - Key: Role
          Value: webserver2

# Create Elastic load balancer
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Subnets:
        - Ref: PublicSubnet3
        - Ref: PublicSubnet4
      Instances:
        - Ref: webserver1
        - Ref: webserver2
      CrossZone: 'True'
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
      HealthCheck:
        Target: TCP:80
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
      SecurityGroups:
      - !Ref SecurityGroupWebServers
      - !Ref SecurityGroupHTTPELB
      Tags:
        - Key: Name
          Value: ALVTESTELB
        - Key: Role
          Value: "Load balance HTTP"
 DNSConfig:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: infra.zone.
      Comment: "Alv test Alias to ELB"
      RecordSets:
      - Name: alvelb.infra.zone.
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt ElasticLoadBalancer.CanonicalHostedZoneNameID
          DNSName: !GetAtt ElasticLoadBalancer.DNSName
